#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

#define PORT 8888

SSL_CTX* create_client_context() {
    SSL_CTX* ctx;

    // Initialize the SSL library
    SSL_library_init();
    OpenSSL_add_all_algorithms();
    SSL_load_error_strings();

    // Create a new SSL context for the client
    ctx = SSL_CTX_new(TLS_client_method());
    if (ctx == NULL) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    // Set supported SSL/TLS versions (optional but recommended)
    SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);

    return ctx;
}


void send_command(SSL* ssl, const char* command) {
    SSL_write(ssl, command, strlen(command));
}

void receive_response(SSL* ssl) {
    char response[1024];
    SSL_read(ssl, response, sizeof(response));
    printf("Server Response:\n%s\n", response);
}

void run_client(SSL_CTX* ctx) {
    int client_fd;
    struct sockaddr_in server_addr;

    // Create a socket
    client_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (client_fd == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    server_addr.sin_port = htons(PORT);

    // Connect to the server
    if (connect(client_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    // Set up the SSL connection
    SSL* ssl = SSL_new(ctx);
    SSL_set_fd(ssl, client_fd);

    if (SSL_connect(ssl) <= 0) {
        ERR_print_errors_fp(stderr);
    } else {
        char command[256];

        // Get command input from the user
        printf("Enter command: ");
        fgets(command, sizeof(command), stdin);

        // Remove the newline character from the command
        size_t command_length = strlen(command);
        if (command_length > 0 && command[command_length - 1] == '\n') {
            command[command_length - 1] = '\0';
        }

        // Send the command to the server
        send_command(ssl, command);

        // Receive and display the server's response
        receive_response(ssl);

        // Clean up
        SSL_shutdown(ssl);
        SSL_free(ssl);
    }

    close(client_fd);
}

int main() {
    SSL_CTX* ctx = create_client_context();
    run_client(ctx);

    // Clean up the SSL library
    SSL_CTX_free(ctx);
    EVP_cleanup();
    return 0;
}
